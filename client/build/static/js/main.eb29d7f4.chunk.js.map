{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["tableIcons","Filter","forwardRef","props","ref","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","tableFieldList","title","field","hidden","App","state","loading","properties","this","getProperties","prevProps","prevState","newState","setState","axios","get","process","then","response","status","console","log","data","statusText","headers","config","catch","err","data-test","className","style","paddingTop","textAlign","width","margin","columns","isLoading","options","filtering","sorting","icons","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6bAcMA,EAAa,CACjBC,OAAQC,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,IAAD,iBAAgBD,EAAhB,CAAuBC,IAAKA,QAC/DC,UAAWH,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,IAAD,iBAAeD,EAAf,CAAsBC,IAAKA,QACjEE,SAAUJ,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,IAAD,iBAAcD,EAAd,CAAqBC,IAAKA,QAC/DG,SAAUL,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,IAAD,iBAAkBD,EAAlB,CAAyBC,IAAKA,QACnEI,aAAcN,sBAAW,SAACC,EAAOC,GAAR,OACvB,kBAAC,IAAD,iBAAiBD,EAAjB,CAAwBC,IAAKA,QAE/BK,YAAaP,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,IAAD,iBAAWD,EAAX,CAAkBC,IAAKA,QAC/DM,OAAQR,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,IAAD,iBAAYD,EAAZ,CAAmBC,IAAKA,QAC3DO,UAAWT,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,IAAD,iBAAiBD,EAAjB,CAAwBC,IAAKA,SAG/DQ,EAAiB,CACrB,CAAEC,MAAO,cAAeC,MAAO,OAAQC,QAAQ,GAC/C,CAAEF,MAAO,UAAWC,MAAO,UAAWC,QAAQ,GAC9C,CAAEF,MAAO,OAAQC,MAAO,OAAQC,QAAQ,GACxC,CAAEF,MAAO,MAAOC,MAAO,MAAOC,QAAQ,GACtC,CAAEF,MAAO,SAAUC,MAAO,OAAQC,QAAQ,GAC1C,CAAEF,MAAO,OAAQC,MAAO,OAAQC,QAAQ,GACxC,CAAEF,MAAO,QAASC,MAAO,QAASC,QAAQ,GAC1C,CAAEF,MAAO,gBAAiBC,MAAO,gBAAiBC,QAAQ,IAiF7CC,E,4MA5EbC,MAAQ,CACNC,SAAS,EACTC,WAAY,I,kEAIZC,KAAKC,kB,yCAGYC,EAAWC,M,sCAMb,IAAD,OACRC,EAAQ,eAAOJ,KAAKH,OAC1BO,EAASN,SAAU,EACnBE,KAAKK,SAAL,eAAkBD,IAClBE,IAAMC,IAAN,UA/CaC,0CA+Cb,oBACGC,MAAK,SAACC,GACL,GAAIA,EAASC,OAAQ,KAAOD,EAASC,OAAQ,IAAK,CAChDC,QAAQC,IAAIH,EAASI,MACrBF,QAAQC,IAAIH,EAASC,QACrBC,QAAQC,IAAIH,EAASK,YACrBH,QAAQC,IAAIH,EAASM,SACrBJ,QAAQC,IAAIH,EAASO,QACrB,IAAMb,EAAQ,eAAO,EAAKP,OAC1BO,EAASN,SAAU,EACnB,EAAKO,SAAL,eAAkBD,QACb,CACL,IAAMA,EAAQ,eAAO,EAAKP,OAC1BO,EAASN,SAAU,EACnBM,EAASL,WAAT,YAA0BW,EAASI,MACnC,EAAKT,SAAL,eAAkBD,QAGrBc,OAAM,SAAAC,GAAG,OAAIP,QAAQC,IAAIM,Q,+BAI5B,OACE,yBAAKC,YAAU,8BAA8BC,UAAU,QACrD,yBAAKA,UAAU,WACb,wBACEA,UAAU,OACVC,MAAO,CAAEC,WAAY,GAAIC,UAAW,SAAUC,MAAO,SAFvD,uBAMA,wBACEJ,UAAU,UACVC,MAAO,CAAEC,WAAY,GAAIC,UAAW,SAAUC,MAAO,SAFvD,6HAMA,yBAAKJ,UAAU,eACb,kBAAC,IAAD,CACEC,MAAO,CAAEG,MAAO,OAAQC,OAAQ,UAChCC,QAASnC,EACToC,UAAW5B,KAAKH,MAAMC,QACtBgB,KAAMd,KAAKH,MAAME,WACjBN,MAAM,sBACNoC,QAAS,CACPC,WAAW,EACXC,SAAS,GAEXC,MAAOpD,W,GArEHqD,IAAMC,WC1BJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAgC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.eb29d7f4.chunk.js","sourcesContent":["import React, { forwardRef } from 'react';\nimport axios from 'axios';\nimport MaterialTable from \"material-table\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Search from \"@material-ui/icons/Search\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL;\n\nconst tableIcons = {\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n};\n\nconst tableFieldList = [\n  { title: \"Property Id\", field: \"p_id\", hidden: false },\n  { title: \"Address\", field: \"address\", hidden: false },\n  { title: \"City\", field: \"city\", hidden: false },\n  { title: \"Zip\", field: \"zip\", hidden: false },\n  { title: \"Zip +4\", field: \"zip4\", hidden: true },\n  { title: \"Type\", field: \"type\", hidden: true },\n  { title: \"Owner\", field: \"owner\", hidden: false },\n  { title: \"Owner Address\", field: \"owner_address\", hidden: false }\n];\n\nclass App extends React.Component {\n\n  state = {\n    loading: false,\n    properties: []\n  };\n\n  componentDidMount() {\n    this.getProperties();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // if (!prevState.properties.length) {\n    //   this.getProperties();\n    // }\n  }\n\n  getProperties() {\n    const newState = {...this.state}\n    newState.loading = true;\n    this.setState({...newState});\n    axios.get(`${BASE_URL}/api/properties`)\n      .then((response) => {\n        if (response.status >299 || response.status <200) {\n          console.log(response.data);\n          console.log(response.status);\n          console.log(response.statusText);\n          console.log(response.headers);\n          console.log(response.config);\n          const newState = {...this.state}\n          newState.loading = false;\n          this.setState({...newState});\n        } else {\n          const newState = {...this.state}\n          newState.loading = false;\n          newState.properties = [...response.data]\n          this.setState({...newState});\n        }\n        })\n      .catch(err => console.log(err));\n  }\n\n  render() {\n    return (\n      <div data-test=\"component-submissions-table\" className=\"root\">\n        <div className=\"section\">\n          <h2\n            className=\"head\"\n            style={{ paddingTop: 20, textAlign: \"center\", width: \"100%\"  }}\n          >\n            Portland Properties\n          </h2>\n          <h3\n            className=\"subhead\"\n            style={{ paddingTop: 20, textAlign: \"center\", width: \"100%\"  }}\n          >\n            Search/Filter by address to find property owners. Search/Filter by owner name to find all properties owned by that owner.\n          </h3>\n          <div className=\"gridWrapper\">\n            <MaterialTable\n              style={{ width: \"100%\", margin: \"0 20px\" }}\n              columns={tableFieldList}\n              isLoading={this.state.loading}\n              data={this.state.properties}\n              title=\"Portland Properties\"\n              options={{\n                filtering: true,\n                sorting: true\n              }}\n              icons={tableIcons}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}